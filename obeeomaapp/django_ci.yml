name: Django CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      PGHOST: ${{ secrets.PGHOST }}
      PGDATABASE: ${{ secrets.PGDATABASE }}
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PGSSLMODE: require
      PGCHANNELBINDING: require

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Tests
      run: |
        python manage.py test
        
    - name: Run Linting
      run: |
        pip install pylint pylint-django
        pylint obeeomaapp/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up Neon Database Connection
      env:
        PGHOST: ${{ secrets.PGHOST }}
        PGDATABASE: ${{ secrets.PGDATABASE }}
        PGUSER: ${{ secrets.PGUSER }}
        PGPASSWORD: ${{ secrets.PGPASSWORD }}
        PGSSLMODE: require
        PGCHANNELBINDING: require
      run: |
        python manage.py migrate --noinput
        python manage.py collectstatic --noinput

    - name: Configure Neon Production Branch
      env:
        NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
      run: |
        # Verify connection to Neon production branch
        curl -X GET "https://console.neon.tech/api/v2/projects/${NEON_PROJECT_ID}/branches/main" \
          -H "accept: application/json" \
          -H "Authorization: Bearer ${NEON_API_KEY}"

    - name: Health Check
      run: |
        echo "Running health checks..."
        curl -f ${{ secrets.APPLICATION_URL }}/health/
        echo "Deployment completed successfully"
