name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
 
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.11'] # Test against your target Python version

    steps:
    - name: Checkout Repository
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # Caches dependencies to speed up subsequent runs

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 # Install linter separately if not in requirements

    - name: Lint with flake8
      # This step runs the flake8 linter to check for code style issues
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Django Tests
      # This step runs your Django test suite
      env:
        # Use a dummy secret key for the test environment
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY_CI }}
        DEBUG: True
        # Use SQLite in-memory for faster testing
        DATABASE_URL: :
      run: |
        python manage.py test

  deploy:
    # This job only runs if the 'build' (CI) job completes successfully
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Trigger Render Deploy
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
